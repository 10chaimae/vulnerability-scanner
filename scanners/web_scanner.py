# scanners/web_scanner.py
import subprocess
import shutil
import time
import signal
import os

class WebScanner:
    def __init__(self, target):
        self.target = target

    def run_command(self, command, tool_name, timeout=300):
        start_time = time.time()
        try:
            with subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, preexec_fn=os.setsid) as process:
                while process.poll() is None:
                    if time.time() - start_time > timeout:
                        os.killpg(os.getpgid(process.pid), signal.SIGTERM)
                        return f"Error: {tool_name} scan timed out after {timeout} seconds"
                    
                    print(f"{tool_name} scan in progress... {int(time.time() - start_time)} seconds elapsed")
                    time.sleep(5)  # Update progress every 5 seconds

                output, error = process.communicate(timeout=10)
                if process.returncode != 0:
                    return f"Error running {tool_name}: {error}"
                return output
        except subprocess.TimeoutExpired:
            os.killpg(os.getpgid(process.pid), signal.SIGTERM)
            return f"Error: {tool_name} scan timed out"
        except KeyboardInterrupt:
            print(f"\n{tool_name} scan interrupted by user.")
            os.killpg(os.getpgid(process.pid), signal.SIGTERM)
            return f"{tool_name} scan interrupted"
        except Exception as e:
            return f"Unexpected error running {tool_name}: {e}"

    def run_nikto(self):
        command = f"nikto -h {self.target}"
        return self.run_command(command, "Nikto", timeout=600)  # 10 minutes timeout for Nikto

    def run_sqlmap(self):
        command = f"sqlmap -u {self.target} --batch --random-agent"
        return self.run_command(command, "SQLMap", timeout=1800)  # 30 minutes timeout for SQLMap

    def parse_nikto_output(self, output):
        vulnerabilities = []
        for line in output.split('\n'):
            if "+ " in line:
                vuln = {
                    "type": "Web Vulnerability",
                    "tool": "Nikto",
                    "details": line,
                    "severity": "Medium"
                }
                vulnerabilities.append(vuln)
        return vulnerabilities

    def parse_sqlmap_output(self, output):
        vulnerabilities = []
        if "sqlmap identified the following injection point" in output:
            vuln = {
                "type": "SQL Injection",
                "tool": "SQLMap",
                "details": "SQL Injection vulnerability found",
                "severity": "Critical"
            }
            vulnerabilities.append(vuln)
        return vulnerabilities

    def scan(self):
        vulnerabilities = []
        
        print("Starting Nikto scan...")
        nikto_output = self.run_nikto()
        if not nikto_output.startswith("Error") and not nikto_output.startswith("Nikto scan interrupted"):
            vulnerabilities.extend(self.parse_nikto_output(nikto_output))
        else:
            print(nikto_output)
        
        print("Starting SQLMap scan...")
        sqlmap_output = self.run_sqlmap()
        if not sqlmap_output.startswith("Error") and not sqlmap_output.startswith("SQLMap scan interrupted"):
            vulnerabilities.extend(self.parse_sqlmap_output(sqlmap_output))
        else:
            print(sqlmap_output)
        
        return vulnerabilities
