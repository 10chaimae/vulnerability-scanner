# scanners/network_scanner.py
import subprocess
import shutil

class NetworkScanner:
    def __init__(self, target):
        self.target = target

    def run_command(self, command, tool_name):
        try:
            process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            output, error = process.communicate()
            if process.returncode != 0:
                return f"Error running {tool_name}: {error}"
            return output
        except Exception as e:
            return f"Unexpected error running {tool_name}: {e}"

    def run_nmap(self):
        command = f"nmap -sV -sC -p- -Pn {self.target}"
        return self.run_command(command, "Nmap")

    def parse_nmap_output(self, output):
        vulnerabilities = []
        for line in output.split('\n'):
            if "VULNERABLE:" in line:
                vuln = {
                    "type": "Network Vulnerability",
                    "tool": "Nmap",
                    "details": line,
                    "severity": "High"
                }
                vulnerabilities.append(vuln)
        return vulnerabilities

    def scan(self):
        nmap_output = self.run_nmap()
        return self.parse_nmap_output(nmap_output)
