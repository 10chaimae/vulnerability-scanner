# report_generator.py
import json
from datetime import datetime

class ReportGenerator:
    def __init__(self, target, vulnerabilities):
        self.target = target
        self.vulnerabilities = vulnerabilities

    def get_remediation_steps(self, vulnerability):
        remediation_steps = {
            "Web Vulnerability": "Apply security patches, implement input validation, and use content security policies.",
            "SQL Injection": "Use parameterized queries or prepared statements. Implement input validation and sanitization.",
            "Network Vulnerability": "Update the affected service to the latest version. Configure firewalls and implement network segmentation.",
            "Software Vulnerability": "Update the software to the latest stable version. Regularly check for and apply security patches."
        }
        return remediation_steps.get(vulnerability['type'], "Conduct a thorough security assessment and apply appropriate patches.")

    def generate_report(self):
        report = {
            "scan_date": datetime.now().isoformat(),
            "target": self.target,
            "vulnerabilities": []
        }

        for vuln in self.vulnerabilities:
            vuln_report = vuln.copy()
            vuln_report["remediation"] = self.get_remediation_steps(vuln)
            report["vulnerabilities"].append(vuln_report)

        with open("vulnerability_report.json", "w") as f:
            json.dump(report, f, indent=4)

    def print_summary(self):
        print("\nScan complete. Detailed report saved to vulnerability_report.json")
        print(f"\nFound {len(self.vulnerabilities)} potential vulnerabilities:")
        for vuln in self.vulnerabilities:
            print(f"- {vuln['type']} ({vuln['severity']}): {vuln['details']}")
            print(f"  Remediation: {self.get_remediation_steps(vuln)}\n")
